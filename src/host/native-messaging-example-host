#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
# import threading
# import Queue
import json
import urllib
import subprocess
import os

currentOS = sys.platform

# def my_handler(type, value, tb):
#     send_message("Uncaught exception: {0}".format(str(value)))

# Install exception handler
# sys.excepthook = my_handler

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if currentOS == "win32":
  # import win32api # if active state python is installed or install pywin32 package seperately
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

print 'test message'
# Helper for check if path or file exists
def checkPath(pathStr):
  pathStr = pathStr.replace('file:///', '')
  pathStr = urllib.unquote(pathStr).decode('utf8')
  # send_message('{"text": "check: %s"}' % pathStr)
  return os.path.exists(pathStr)

# Helper for checking if file is exec. returns file if executable
def which(program):
  filePath = re.sub(r'file:[\/]{2,3}', '', program) # remove file://

  # send_message('{"text": "check: %s"}' % filePath)

  def is_exe(fpath):
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

  fpath, fname = os.path.split(filePath)
  if fpath:
    if is_exe(filePath):
      return filePath
  else:
    for path in os.environ["PATH"].split(os.pathsep):
      path = path.strip('"')
      exe_file = os.path.join(path, filePath)
      if is_exe(exe_file):
        return exe_file
  return None

# Thread that reads messages from the webapp.
def read_thread_func(queue):
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      # if queue:
      #   queue.put(None)
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')

    data = json.loads(text)
    # self.log('starting %s' % filename['text'])
    fileStr = data['url']
    # send_message('{"starting": "%s"}' % fileStr)
    reveal = data['reveal']

    exeAllowed = data['exeAllowed']

    if (checkPath(fileStr)):
      if (reveal):
        subprocess.Popen(r'explorer /select,"%s"' % fileStr)
        # send_message('{"text": "select folder & select file %s"}' % fileStr)
      else:
        # testStr = os.path.normpath(fileStr)
        # if not (os.stat(fileStr)['ST_MODE'] & (S_IXUSR|S_IXGRP|S_IXOTH)) and exeAllowed:
        # testStr = fileStr.replace('file:///', '')

        # if (!os.access(testStr, os.X_OK)):
        # if which(fileStr) is None:
          # is not a executable --> probably removing .exe in Windows could still execute (test neeeded)
        result = which(fileStr)
        send_message('{"stat": "%s"}' % result)

        os.startfile(fileStr) # todo add try catch if file can't be opened
        # send_message('{"error": %s }' % "null")
        # else:
        #   if exeAllowed:
        #     os.startfile(fileStr) # todo add try catch if file can't be opened
        #   else:
        #     send_message('{"error": %s }' % "ERROR_EXECTUBALES_NOT_ENABLED")
    else:
      if (reveal):
        fileStr = os.path.split(fileStr)
        # send_message('{"text": "opening folder %s"}' % fileStr[0])
        subprocess.Popen(r'explorer "%s"' % fileStr[0])
        send_message('{"error": %s }' % "null")
      else:
        send_message('{"error": "%s" }' % "ERROR_BAD_LINK")
    sys.exit(0)

def Main():
  read_thread_func(None)
  sys.exit(0)

if __name__ == '__main__':
  Main()
